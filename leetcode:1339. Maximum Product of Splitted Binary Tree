priblem link:https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/
/*Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.

Return the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 109 + 7.

Note that you need to maximize the answer before taking the mod and not after taking it.
*/
//tc=o(2n)
//sc=o(1)

class Solution {
public:
long long int maxi=0;
long long int mod=1000000007;
long long int subtree_sum_at_each_point(TreeNode* root,int total_sum)
{
    if(root==NULL)
    {
        return 0;
    }
    long long left=subtree_sum_at_each_point(root->left,total_sum);
maxi=max(maxi,(total_sum-left)*left);

    long long right=subtree_sum_at_each_point(root->right,total_sum);
maxi=max(maxi,(total_sum-right)*right);
long long int curr_sum=root->val+left+right;
maxi=max(maxi,(total_sum-curr_sum)*curr_sum);
    maxi=maxi;
    return curr_sum;
}
    
long long int total_tree_sum(TreeNode* root)
{
    if(root==NULL)
    {
        return 0;
    }
return root->val+total_tree_sum(root->left)+total_tree_sum(root->right);
}
    int maxProduct(TreeNode* root) {
  //first find the total sum of suntre..
long long int total_sum=total_tree_sum(root);
//now create a function to find the subtree sum at each pint 
//and calculate max(maxi,(totalsum-currsum)*curr_sum)
subtree_sum_at_each_point(root,total_sum);
       // cout<<sum<<"   ";
    return maxi%mod;
        return (int)maxi;
    return 0;
    }
};
