/*Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

 

Example 1:


Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.*/

//tc=o(n)
//sc=o(n)
      {
    if(root==NULL)
        {
        return;
        }
     inorder (root->left,res);
      res.push_back(root->val);
    inorder(root->right,res);
      }
    int rangeSumBST(TreeNode* root, int low, int high) {
      int sum=0;
     vector<int>res;
       inorder(root,res);
  for(int i=0;i<res.size();i++)
    {
      if(res[i]>=low && res[i]<=high)
        {
        sum+=res[i]; 
          }
     else if(res[i]>high)
         {
         break;
         }
      
      }
        return sum;
    }
