/*You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply 
the following operation exactly k times:

Choose any piles[i] and remove floor(piles[i] / 2) stones from it.
Notice that you can apply the operation on the same pile more than once.

Return the minimum possible total number of stones remaining after applying the k operations.
Example 1:
Input: piles = [5,4,9], k = 2
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [5,4,5].
- Apply the operation on pile 0. The resulting piles are [3,4,5].
The total number of stones in [3,4,5] is 12.*/
//tc=o(n)
//sc=(n)

    int minStoneSum(vector<int>&arr, int k) {
        priority_queue<int>pq;
    int n=arr.size();
    for(int i=0;i<n;i++)
    {
        pq.push(arr[i]);
    }
    while(k>=1 && !pq.empty())
    {
        int val=pq.top();
        pq.pop();
            val=val-val/2;
        pq.push(val);
        k--;
        
    }
    int sum=0;
        while(!pq.empty())
        {
            sum+=pq.top();
            pq.pop();
        }
        return sum;
    }

