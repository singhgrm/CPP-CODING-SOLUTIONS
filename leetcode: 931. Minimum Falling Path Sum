/*Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).*/
//tc=o(n*m)
//sc=o(1)
 int minFallingPathSum(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
for(int i=1;i<n;i++)
{
    for(int j=0;j<m;j++)
    {
        if(j==0)
        {
    //can not go to the help
    mat[i][j]+=min(mat[i-1][j],mat[i-1][j+1]);
        }
    else if(j==m-1)
    {
        mat[i][j]+=min(mat[i-1][j-1],mat[i-1][j]);
    }
    else
    {
        mat[i][j]+=min({mat[i-1][j],mat[i-1][j-1],mat[i-1][j+1]});
    }
    }
}
    int mini=INT_MAX;
    for(int j=0;j<m;j++)
    {
        mini=min(mini,mat[n-1][j]);
    }
        return mini;
    }

