/*Given a positive integer n, find the pivot integer x such that:

The sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.
Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.

*/

//tc=o(n/2)
//sc=o(n)

    int pivotInteger(int n) {
        if(n==1)
        {
            return 1;
        }
      vector<int>res;
    for(int i=1;i<=n;i++)
    {
        res.push_back(i);
    }
        int low=res[0],high=res[n-1];
  int i=1,j=n-2;
    while(i<j)
    {
        if(low<high)
        {
            low+=res[i++];
        }
        else
        {
            high+=res[j--];
        }
    }
        if(low==high)
        {
            return i+1;
        }
        return -1;
    }
