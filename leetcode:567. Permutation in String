/*Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
*/
//tc=o(n)
//sc=(1)

 bool checkInclusion(string s1, string s2) {
     vector<int>s1hash(26,0);
       if(s1.size()>s2.size())
       {
           return false;
       }
    vector<int>s2hash(26,0);
    int left=0;
    int right=0;
   //store the frequency of character for first string s1
    while(right<s1.size())
    {
      s1hash[s1[right]-'a']++;
     s2hash[s2[right]-'a']++;
        right++;
    }
    right--;//to maintain the the condition check
    while(right<s2.size())
    {
        if(s1hash==s2hash)
        {
            return true;//in first iteration permutation find
        }
        right++;
        if(right!=s2.size())
        {
            s2hash[s2[right]-'a']++;//add next charater occurance
        }
        s2hash[s2[left]-'a']--;//remove starting character occurance
        left++;
    }
      return false;  
    }
