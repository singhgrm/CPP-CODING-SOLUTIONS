/*We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into
the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, 
return true if it is possible to split everyone into two groups in this way.
Example 1:
Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4] and group2 [2,3].
*/
//tc=o(n)
//sc=o(n)

bool dfs(vector<int>adj[],int newcolor,int node,vector<int>&color)
{
    		color[node] = newcolor;
		for (auto i : adj[node])
		{
			if (color[i] == -1)
			{
				dfs(adj, 1 - newcolor, i, color);
			}
			else if (color[i] == color[node])
			{
				return false;
			}
		}
		return true;

}
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
     		vector<int> adj[n + 1];
		//graph adj generation using given vector<vector<int>>dislikes
     // no two adacant node slcan be same color
		for (auto i : dislikes)
		{
			adj[i[0]].push_back(i[1]);
			adj[i[1]].push_back(i[0]);
		}
		//graph coloring using 2 color
		//color are 0 & 1
		vector<int>color(n + 1, -1);
		for (int i = 1; i <= n; i++)
		{
			if (color[i] == -1)
			{
				if (!dfs(adj,1,i, color))
				{
					return false;
				}
			}
		}
		return true;

    }

