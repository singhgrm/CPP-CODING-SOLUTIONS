/*You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
*/
//here we will solve this problem using memoization and tabulation dp both..
//tc=o(n*2)
//sc=o(n*2)

int dfs(vector<int>&arr,int idx,int buy,vector<vector<int>>&dp)
{
    if(idx>=arr.size())
    {
        return 0;
    }
if(dp[idx][buy]!=-1)
{
    return dp[idx][buy];
}
int profit=0;
if(buy==1)
{
    //means buying here manes paise pay krenge so -ve
profit=max(-arr[idx]+dfs(arr,idx+1,0,dp),dfs(arr,idx+1,1,dp));
}
else
{
    profit=max(arr[idx]+dfs(arr,idx+2,1,dp),dfs(arr,idx+1,0,dp));
}
    
return dp[idx][buy]=profit;
    
}
    int maxProfit(vector<int>&arr) {
//if we are selling stock at i index then next stock we will sell at i+2 index okay..apply here //dp  to explore all the path
int n=arr.size();
vector<vector<int>>dp(n,vector<int>(2,-1));

//here 1 means first buying it 
return dfs(arr,0,1,dp);
//tabulation method
        //buy =1 means buy
        //buy =0 means sell
/*for(int i=n-1;i>=0;i--)
{
    for(int buy=0;buy<=1;buy++)
    {
        int profit=0;
        if(buy==1)
        {
          //means firstb buy it..means paise dene hoge
            profit=max(-arr[i]+dp[i+1][0],dp[i+1][1]);
            
        }
        else
        {
            //agr sell krenge to paise lenen hoge
         profit=max(arr[i]+dp[i+2][1],dp[i+1][0]);
        }
        dp[i][buy]=profit;
        
    }
}
        return dp[0][1];
        */

    
    }
