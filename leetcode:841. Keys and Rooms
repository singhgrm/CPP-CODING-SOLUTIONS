/*There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you
cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks,
and you can take all of them with you to unlock the other rooms.
Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.
Example 1:

Input: rooms = [[1],[2],[3],[]]
Output: true */
//tc=o(n)
//sc=o(n)

 void dfs(vector<vector<int>>&arr,int src,vector<bool>&visited)
 {
     visited[src]=true;
     for(auto nbr:arr[src])
     {
         if(visited[nbr]==false)
         {
             dfs(arr,nbr,visited);
         }
     }
 }
    bool canVisitAllRooms(vector<vector<int>>&arr) {
        int n=arr.size();
        vector<bool>visited(n,false);
        dfs(arr,0,visited);
        for(int i=0;i<n;i++)
        {
            if(visited[i]==false)
            {
                return false;
            }
        }
        return true;
    }

