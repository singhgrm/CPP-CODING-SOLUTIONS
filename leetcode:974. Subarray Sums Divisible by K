/*Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
*/

//tc=o(n)
//sc=o(n)

//agenda is very sinmple phle elemnet ko sum krte jao 
//remender ko map me store kro with frequrncy 
//agr age same remenbder mil gya jo phle se map me store h iska mtlcb bich ka elennt k se dvide hoge to to uss remender ki frequcy ko count kr lo
//map me 0 sum ke liye 1 stire kra dege
//0->1 means agr kabhi sum zero hua to iska mtlb ye phle aachuka h
mp[0]=1;
        int sum=0,count=0;
    for(int i=0;i<arr.size();i++)
    {
        sum+=arr[i];
        int rem=sum%k;
        if(rem<0)
        {
            rem+=k;
        }
        
    if(mp.find(rem)!=mp.end())
    {
        count+=mp[rem];
    }
        mp[rem]++;
    }
        return count;
    }


