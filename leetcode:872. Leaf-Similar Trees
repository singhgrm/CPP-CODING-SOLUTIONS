//if leaf node are same in both tree return true
/*Example 1:


Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true
*/
//tc=o(n)\
//sc=o(n)

bool is_leaf(TreeNode* root)
{
    if(root->left==NULL && root->right==NULL)
    {
        return true;
    }
    return false;
}
void inorder(TreeNode* root,vector<int>&res)
{
    if(root==NULL)
    {
        return;
    }
if(is_leaf(root))
{
    res.push_back(root->val);
}
 inorder(root->left,res);
    inorder(root->right,res);
}
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
      vector<int>res1;
        vector<int>res2;
        inorder(root1,res1);
        inorder(root2,res2);
    for(int i=0;i<res1.size();i++)
    {
        cout<<res1[i]<<"  ";
    }
        cout<<endl;
     for(int i=0;i<res2.size();i++)
    {
        cout<<res2[i]<<"  ";
    }
        cout<<endl;
    if(res1.size()!=res2.size())
    {
        return false;
    }
    for(int i=0;i<res1.size();i++)
    {
        if(res1[i]!=res2[i])
        {
            return false;
        }
    }
        return true;
    }
