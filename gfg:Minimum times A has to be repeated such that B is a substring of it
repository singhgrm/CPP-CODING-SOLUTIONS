/*Given two strings A and B. Find minimum number of times A has to be repeated such that B is a Substring of it. If B can never be a substring then return -1.

 

Example 1:

Input:
A = "abcd"
B = "cdabcdab"
Output:
3
Explanation:
Repeating A three times (abcdabcdabcd),
B is a substring of it. B is not a substring
of A when it is repeated less than 3 times.
Example 2:
Input:
A = "ab"
B = "cab"
Output :
-1
*/
//tc=o(len(b))
//sc=o(1)

    int minRepeats(string s1, string s2) {
        
       // s1=s1+s1+s1;
    
    string temp=s1;
    int count=1;
    while(temp.size()<s2.size())
    {
     if(temp.find(s2)!=string::npos)
    {
        return count;
    } 
    count++;
    temp+=s1;
    }
//if not equal still add one more time and check
 if(temp.find(s2)!=string::npos)
    {
        return count;
    } 
temp+=s1;
 if(temp.find(s2)!=string::npos)
    {
        return count+1;
    } 
    return -1;
    }
