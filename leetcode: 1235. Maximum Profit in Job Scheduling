//here we need to find out maximum profit.
//so forst sort the array based on ending time..then at each index calculate the profit..the start timeof next index>=end time of cuureent index the add the progt
//if two start and end time are same..then select them based on maximum profit..

tc=o(nlogn)

 int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
             int n = profit.size();
        
        vector<vector<int>> jobs;
        for(int i=0;i<n;i++){
            jobs.push_back({endTime[i],startTime[i],profit[i]});
        }
        sort(jobs.begin(),jobs.end());
        
        vector<int> dp;
        dp.push_back(jobs[0][2]);
        
        for(int i=1;i<n;i++){
            int including = jobs[i][2];
            int lastoverlapping = -1;
            
            for(int j=i-1;j>=0;j--){
                if(jobs[j][0]<=jobs[i][1]){
                    lastoverlapping = j;
                    break;
                }
            }
            if(lastoverlapping != -1)
                including += dp[lastoverlapping];
            
            dp.push_back( max(dp[i-1],including) );
        }
        
        return dp[n-1];
   
    }
