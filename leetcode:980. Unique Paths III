/*You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.
Example 1:
Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)*/

//tc=(pow(4,n))
//sc=o(1)

int dfs(vector<vector<int>>&grid,int i,int j,int n,int m ,int count)
{
    if(i<0 || i>=n || j<0 || j>=m || grid[i][j]==-1)
    {
        return 0;
    }
    if(grid[i][j]==2)
    {
        return count==-1?1:0;
    }
count--;
    grid[i][j]=-1;
int d=dfs(grid,i+1,j,n,m,count);
int l=dfs(grid,i,j-1,n,m,count);
int r=dfs(grid,i,j+1,n,m,count);
int t=dfs(grid,i-1,j,n,m,count);
    grid[i][j]=0;
    count++;
    return l+r+d+t;
}
    int uniquePathsIII(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
    int row=0,col=0,count=0;
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<m;j++)
         {
             if(grid[i][j]==0)
             {
                 count++;
             }
             else if(grid[i][j]==1)
             {
                 row=i;
                 col=j;
             }
         }
     }
        return dfs(grid,row,col,n,m,count);;
    }
