/*A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them.
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6*/
//o(n)
    int maxi=INT_MIN;
int dfs(TreeNode* root)
{
    if(root==NULL)
    {
        return 0;
    }
int ls=max(0,dfs(root->left));
int rs=max(0,dfs(root->right));
maxi=max(maxi,ls+rs+root->val);
return max(ls,rs)+root->val;
}
    
    
int maxPathSum(TreeNode* root) {
        
    dfs(root);
        return maxi;
    }
