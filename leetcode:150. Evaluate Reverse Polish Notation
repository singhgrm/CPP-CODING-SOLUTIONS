/*Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.
no any division by zero operation.
Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
*/
//tc=o(n*(lenof string))
//sc=o(1)
    int evalRPN(vector<string>&s) {
        int sum=0;
        int n=s.size();
        stack<long long int>st;
     for(int i=0;i<n;i++)
     {
         string str=s[i];
         if(str.size()==1 && (str[0]=='+' || str[0]=='-' ||str[0]=='*' ||str[0]=='/'))
         {
            long long  int a=st.top();
             st.pop();
        long  int b=st.top();
             st.pop();
          long long   int sum=0;
        if(str[0]=='+')
        {
            sum=(a+b);
        }
       else if(str[0]=='-')
        {
            sum=(b-a);
        }
           else  if(str[0]=='*')
        {
            sum=(a*b);
        }
        else
        {
            sum=(b/a);
        }
             st.push(sum);
         }
    else
    {
       int j=0;
       long long  int num=0;
        int flag=1;
        if(str[0]=='-')
        {
           flag=-1;
            j++;
        }
        while(j<str.size())
        {
          num=((num*10)+(str[j]-'0'));
            j++;
        }
      //  cout<<num<<"  ";
        st.push(flag*num);
    }
        
     }
        return (int)st.top();
    }
