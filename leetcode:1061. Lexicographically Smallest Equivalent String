/*You are given two strings of the same length s1 and s2 and a string baseStr.

We say s1[i] and s2[i] are equivalent characters.

For example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.
Equivalent characters follow the usual rules of any equivalence relation:

Reflexivity: 'a' == 'a'.
Symmetry: 'a' == 'b' implies 'b' == 'a'.
Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.
For example, given the equivalency information from s1 = "abc" and s2 = "cde", "acd" and "aab" are equivalent strings of baseStr = "eed", and "aab" is 
the lexicographically smallest equivalent string of baseStr.

Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.

Input: s1 = "parker", s2 = "morris", baseStr = "parser"
Output: "makkek"
Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].
The characters in each group are equivalent and sorted in lexicographical order.
So the answer is "makkek".*/

    vector<int>hash;

    int find(int x)
    {
        if(hash[x]==-1)
        {
            return x;
        }
    return hash[x]=find(hash[x]);
    }
    
void Union(int x,int y)
{
    
    int parent_x=find(x);
int parent_y=find(y);
if(parent_x==parent_y)
{
    return;
}
    hash[max(parent_x,parent_y)]=min(parent_x,parent_y);
}
    
    
    string smallestEquivalentString(string s1, string s2, string base_str) {
        hash.resize(26,-1);
    for(int i=0;i<s1.size();i++)
    {
        Union(s1[i]-'a',s2[i]-'a');
    }
        for(int i=0;i<base_str.size();i++)
        {
            base_str[i]=find(base_str[i]-'a')+'a';
        }
        return base_str;
    }

