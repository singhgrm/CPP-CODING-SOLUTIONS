/*Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order 
of the remaining characters.
For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.
Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.*/

//tc=o(n*m)
//sc=o(n*m)

    int longestCommonSubsequence(string s1, string s2) {
        int n=s1.size();
        int m=s2.size();
vector<vector<int>>dp(n+1,vector<int>(m+1));
 for(int i=1;i<=n;i++)
 {
     for(int j=1;j<=m;j++)
     {
         if(s1[i-1]==s2[j-1])
         {
            dp[i][j]=1+dp[i-1][j-1];
         }
         else
         {
             dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
         }
     }
 }
        return dp[n][m];
        
    }

