/*Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:
Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]*/

void  dfs(vector<vector<int>>&g,int src,int tar,vector<int>&res,vector<vector<int>>&ans)
{
    if(src==tar)
    {
        //res.push_back(tar);
        ans.push_back(res);
        return;
    }
    for(int i=0;i<g[src].size();i++)
    {
        res.push_back(g[src][i]);
         dfs(g,g[src][i],tar,res,ans);
        res.pop_back();
    }
}
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>&g) {
       int tar=g.size()-1; 
    vector<vector<int>>ans;
        vector<int>res;
        res.push_back(0);
    dfs(g,0,tar,res,ans);
        return ans;
    }

