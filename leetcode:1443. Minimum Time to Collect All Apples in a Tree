/*Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree.
Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally,
there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  
Example 2:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]*/

int dfs(vector<int>adj[],int src,int parent,vector<bool>&is_app)
    {
    int count=0;
    for(auto nbr:adj[src])
    {
        if(nbr!=parent)
        {
            
            
            int res=dfs(adj,nbr,src,is_app);
            //if apple find then return 2
            //if chlren have the apple then also return chdren_ans+2
            if(res>0 || is_app[nbr])
            {
                count+=res+2;
            }
        }
    }
    return count;
    }
    
    
    int minTime(int n, vector<vector<int>>&g, vector<bool>&is_app) {
       vector<int>adj[n];
    for(int i=0;i<g.size();i++)
    {
        adj[g[i][0]].push_back(g[i][1]);
          adj[g[i][1]].push_back(g[i][0]);
    }
   // vector<bool>visited(n,false);
     return   dfs(adj,0,-1,is_app);
     //   return count;
        
    }


